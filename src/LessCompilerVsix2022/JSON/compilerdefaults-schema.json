{
  "$schema": "http://json-schema.org/draft-04/schema",
  "description": "Schema for bundleconfig.json files",

  "type": "object",

  "definitions": {
    "less": {
      "description": "Specify options for the compiler.",
      "type": "object",
      "properties": {
        "autoPrefix": {
          "description": "Support for AutoPrefixer by adding a browser string. An empty string means this feature is disabled. Example: 'last 2 versions, > 5%'. See more at https://github.com/ai/browserslist.",
          "type": "string",
          "default": ""
        },
        "cssComb": {
          "description": "LESS only. CSScomb helps you sort and categorize CSS properties in your code to improve maintenance of your stylesheets. You can specify a relative path to a local .json file as well.",
          "default": "none",
          "oneOf": [
            {
              "enum": [ "csscomb", "zen", "yandex", "none" ]
            },
            {
              "type": "string",
              "pattern": ".+\\.json$"
            }
          ]
        },
        "math": {
          "description": "Specifies which mode Less will use to process the math in your CSS.",
          "default": "none",
          "enum": [ "always", "parens-division", "parens", "strict" ]
        },
        "strictUnits": {
          "description": "Without this option, less attempts to guess at the output unit when it does maths.",
          "type": "boolean",
          "default": false
        },
        "relativeUrls": {
          "description": "This option allows you to re-write URL's in imported files so that the URL is always relative to the base imported file.",
          "type": "boolean",
          "default": true
        },
        "rootPath": {
          "description": "Allows you to add a path to every generated import and URL in your CSS. This does not affect less import statements that are processed, just ones that are left in the output css.",
          "type": "string"
        },
        "sourceMap": {
          "type": "boolean",
          "oneOf": [
            {
              "type": "boolean",
              "description": "Generates a base64 encoded source map at the bottom of the output.",
              "default": false
            },
            {
              "type": "object",
              "properties": {
                "outputFilename": {
                  "type": "string",
                  "description": "Specifies file for source map"
                },
                "sourceMapRootpath": {
                  "type": "string",
                  "description": "Specifies a rootpath that should be prepended to each of the less file paths inside the sourcemap and also to the path to the map file specified in your output css."
                },
                "sourceMapBasepath": {
                  "type": "string",
                  "description": "This is the opposite of the rootpath option, it specifies a path which should be removed from the output paths."
                },
                "outputSourceFiles": {
                  "type": "boolean",
                  "description": "This option specifies that we should include all of the Less files in to the sourcemap. This means that you only need your map file to get to your original source."
                },
                "sourceMapFileInline": {
                  "type": "boolean",
                  "description": "This option specifies that the map file should be inline in the output CSS."
                },
                "sourceMapURL": {
                  "type": "string",
                  "description": "Allows you to override the URL in the css that points at the map file. This is for cases when the rootpath and basepath options are not producing exactly what you need."
                }
              }
            }
          ]
        },
        "sourceMapOutputFileName": {
          "description": ""
        },
        "sourceMapRootPath": {
          "description": "Base path, will be emitted in source-map as is.",
          "type": "string"
        },
        "sourceMapBasePath": {
          "description": "This is the opposite of the rootpath option, it specifies a path which should be removed from the output paths.",
          "type": "string"
        }
      }
    },

    "baseMinify": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "gzip": {
          "description": "Produce a .gz file after minification.",
          "type": "boolean",
          "default": false
        },
        "indent": {
          "description": "For the multi-line output feature, how many spaces to use when indenting a block (see outputMode).",
          "type": "string",
          "default": "    "
        },
        "outputMode": {
          "description": "SingleLine minifies everything to a single line. MultipleLines breaks the minified code into multiple lines for easier reading.",
          "enum": [ "multipleLines", "singleLine", "none" ],
          "default": "singleLine"
        }
      }
    },

    "cssMinify": {
      "type": "object",
      "properties": {
        "colorNames": {
          "description": "CSS only. If no color names are to be used, set this value to 'hex'. If a set of colors recognized by all major browser is okay to use (W3C-strict validation is not required), set this value to 'major'.",
          "enum": [ "hex", "major", "noSwap", "strict" ],
          "default": "strict"
        },
        "commentMode": {
          "description": "CSS only. How to treat comments in the code. The default is 'none', which will strip all comments except 'important' comments. 'all' will leave all comments, and 'hacks' will only leave certain known comment-based hacks.",
          "enum": [ "none", "all", "hacks", "important" ],
          "default": "important"
        },
        "termSemicolons": {
          "description": "Forces all rules to be terminated with semicolons if set to true.",
          "type": "boolean",
          "default": false
        }
      }
    }
  },

  "properties": {
    "compilers": {
      "type": "object",

      "properties": {
        "less": { "$ref": "#/definitions/less" }
      }
    },
    "minifiers": {
      "type": "object",

      "properties": {
        "css": {
          "allOf": [
            { "$ref": "#/definitions/baseMinify" },
            { "$ref": "#/definitions/cssMinify" }
          ]
        }
      }
    }
  }
}
